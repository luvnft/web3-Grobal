import { TIME_ZONE, DATE_LOCAL_LANGUAGE } from 'components/utils';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { API_RESPONSE } from 'pages/api/api-constants';
import { useState, useEffect } from 'react';
import { useWalletConnectClient } from '../components/contexts/ClientContext';

export default function Menu() {
  const { accounts, setAccounts } = useWalletConnectClient();
  const [someCommunityInfo, setSomeCommunityInfo] = useState([]);

  const router = useRouter();

  // コミュニティ情報の取得APIの呼び出し
  useEffect(() => {
    const accounts = JSON.parse(sessionStorage.getItem('accounts'));
    if (accounts) {
      setAccounts(accounts);
    } else {
      setAccounts([]);
      sessionStorage.clear();
      router.push('/');
    }
    getSomeCommunityAPI();
  }, []);

  //　コミュニティ情報の取得
  const getSomeCommunityAPI = async () => {
    try {
      // APIの実行
      const res = await fetch(`/api/community/getSomeCommunity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({}),
      });

      // API ステータスコードのチェック
      if (res.status != API_RESPONSE.OK.CODE) {
        alert('DBエラーが発生しました。');
        return;
      }

      const resJson = await res.json();
      const dbSomeItems = resJson.output?.Items; // items 複数形

      // DB データ取得チェック
      if (typeof dbSomeItems === 'undefined') {
        alert('DBエラーが発生しました。');
        return;
      }

      // DB検索結果が0件だった場合も問題なく処理を行える
      setSomeCommunityInfo(dbSomeItems);
      sessionStorage.setItem(
        'lsSomeCommunityInfo',
        JSON.stringify(dbSomeItems),
      );
    } catch (e) {
      alert('DBエラーが発生しました。');
      return;
    }
  };

  // コミュニティのレンダー
  const renderCommunity = () => {
    let array = [];
    someCommunityInfo.map((item, i) => {
      array.push(
        <div
          key={i}
          className={
            'w-[calc(100%)] h-[170px] bg-white rounded-[10px] border-[6px] border-black/40 mt-[25px]'
          }
        >
          <div className='flex flex-row justify-between'>
            <div className='flex flex-row items-center'>
              <div className='rounded-tl-[10px] w-[100px] h-[100px]'>
                <img
                  className='rounded-tl-[4px] object-cover w-[100px] h-[100px]'
                  src={'/community.png'}
                  alt=''
                ></img>
              </div>

              <div className='ml-[12px]'>
                <p className='text-[#4C4948] font-[700] text-[12px] leading-[calc(120%)]'>
                  {`${item.building}(${item.location})`}
                </p>
                <p className='text-[#4C4948] font-[700] text-[18px] leading-[calc(120%)]'>
                  {`${item.communityName}`}
                </p>
                <p className='text-red-500 font-[400] text-[14px] leading-[calc(120%)]'>
                  {`（${item.participants}人 / ${item.capacity}人）`}
                </p>
                <p className='text-[#4C4948] font-[400] text-[12px] leading-[calc(120%)]'>
                  {`有効期限：${new Date(item.expire).toLocaleDateString(
                    DATE_LOCAL_LANGUAGE,
                    { timeZone: TIME_ZONE },
                  )}`}
                </p>
              </div>
            </div>

            <div className='flex justify-center items-center w-[54px] h-[20px] rounded-[4px] bg-[#A5A4A3] mr-[10px] mt-[6px]'>
              <p className='text-white font-[700] text-[10px] leading-[calc(160%)]'>
                参加可能
              </p>
            </div>
          </div>

          <div className={'bg-black/20 w-[calc(100%)] h-[1.5px]'}></div>

          <div
            className={
              'w-[calc(100%)] h-[56.5px] flex justify-center items-center  '
            }
          >
            <div
              className='w-[calc(100%)] h-[38.5px] rounded-[4px] bg-[#22A9BC] mx-[10px] flex justify-center space-x-[10px] items-center'
              onClick={() =>
                router.push({
                  pathname: '/detail',
                  query: { index: i },
                })
              }
            >
              <Image
                src={`/new-design/ticketIcon.svg`}
                style={{ objectFit: 'obtain' }}
                width={22}
                height={22}
              />
              <p className='text-white font-[700] text-[14px]'>
                コミュニティに参加
              </p>
            </div>
          </div>
        </div>,
      );
    });
    return array;
  };

  return (
    <>
      <div className={'mx-[20px] my-[24px] min-h-[calc(100vh)]'}>
        <Head>
          <title>COMMUNITY LIST</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>

        <div className='flex flex-row justify-start items-center'>
          <Image
            src={`/new-design/backBtn.svg`}
            style={{ objectFit: 'obtain' }}
            width={45}
            height={45}
            onClick={() =>
              router.push({
                pathname: '/',
              })
            }
          />

          <p className='text-[#4C4948] font-[700] text-[20px] break-words ml-[12px] leading-[calc(100%)]'>
            参加可能
            <br />
            コミュニティ
          </p>
          <div className='ml-auto'>
            <div
              className={
                'w-[calc(100%)] h-[56.5px] flex justify-center items-center'
              }
            >
              <span
                class="inline-flex items-center rounded-md bg-red-50 px-2 py-3 text-l font-[600] text-red-800 ring-1 ring-inset ring-red-600/20"
                onClick={() =>
                  router.push({
                    pathname: '/createCommunity',
                  })
                }>コミュニティ作成
              </span>
            </div>
          </div>
        </div>

        <div className='mt-[32px]'>{renderCommunity()}</div>

        <div className={`fixed top-0 left-0 w-full h-screen z-[-1]`}>
          <Image src={`/background.png`} layout={`fill`} objectFit={`cover`} />
        </div>
      </div>
    </>
  );
}
